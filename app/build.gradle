/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Lombok
    id 'io.freefair.lombok' version '8.4'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // Use mvnrepository for resolving confluent dependencies
    maven { url confluentUrl }
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
    // Kfaka
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.6.0'
    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: '3.6.0'
    // Avro & Avro serde
    implementation group: 'org.apache.avro', name: 'avro', version: '1.11.1'
    implementation group: 'org.apache.avro', name: 'avro-compiler', version: '1.11.1'
    implementation group: 'io.confluent', name: 'kafka-streams-avro-serde', version: '7.5.1'
    // PostgreSQL
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.23'
    // Hibernate
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.6.1.Final'
    // Log4J 
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.21.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.21.1'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'pfe_broker.App'
}

task runProducer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pfe_broker.OrderProducer'
}

task runConsumer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pfe_broker.TradeConsumer'
}

task runOrderStream(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pfe_broker.streams.order.OrderStream'
}

task runTradeStream(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pfe_broker.streams.trade.TradeStream'
}

task runMarketMatcher(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pfe_broker.MarketMatcher'
}

task initDB(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pfe_broker.utils.HibernateUtil'
}

task generateAvro(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pfe_broker.utils.GenerateAvro'
}